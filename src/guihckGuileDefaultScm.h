#ifndef GUIHCKGUILEDEFAULTSCM_H
#define GUIHCKGUILEDEFAULTSCM_H

static const char GUIHCK_GUILE_DEFAULT_SCM[] =
    "(define (create-elements . elements)"
    "  (map (lambda (e) (e)) elements))"

    "(define (create-element type props children)"
    "  (define (set-properties! props)"
    "    (if (null? props) '() (begin"
    "      (set-element-property! (car props) (cadr props))"
    "      (set-properties! (cddr props)))))"
    "  (lambda ()"
    "    (begin"
    "      (push-new-element! type)"
    "      (set-properties! props)"
    "      (map (lambda (c) (c)) children)"
    "      (if (list? (get-element-property 'onLoaded)) (primitive-eval (get-element-property 'onLoaded)) #t)"
    "      (pop-element!))))"

    "(define (composite constructor default-props . default-children)"
    "  (lambda (props . children) "
    "    (apply constructor (append (list (append default-props props)) default-children children))))"

    "(define set-prop!"
    "  (case-lambda"
    "    ((property value) (set-prop! (get-element) property value))"
    "    ((element property value)"
    "      (push-element! element)"
    "      (set-element-property! property value)"
    "      (pop-element!))))"

    "(define get-prop!"
    "  (case-lambda"
    "    ((property) (get-prop! (get-element) property))"
    "    ((element property)"
    "      (push-element! element)"
    "      (let ((value (get-element-property property)))"
    "        (pop-element!)"
    "        value))))"

    "(define this! get-element)"

    "(define (find-element! id)"
    "  (begin"
    "    (push-element-by-id! id)"
    "    (let ((result-element (get-element)))"
    "      (pop-element!)"
    "      result-element)))"

    "(define parent!"
    "  (case-lambda"
    "    (() (parent! (get-element)))"
    "    ((element)"
    "      (push-element! element)"
    "      (push-parent-element!)"
    "      (let ((parent-element (get-element)))"
    "        (pop-element!)"
    "        (pop-element!)"
    "        parent-element))))"


    "(define child!"
    "  (case-lambda"
    "    ((index) (child! (get-element) index))"
    "    ((element index)"
    "      (push-element! element)"
    "      (push-child-element! index)"
    "      (let ((child-element (get-element)))"
    "        (pop-element!)"
    "        (pop-element!)"
    "        child-element))))"

    "(define children!"
    "  (case-lambda"
    "    (() (children! (get-element)))"
    "    ((element)"
    "      (push-element! element)"
    "      (let ((n (get-element-child-count)))"
    "        (define (iter i lst)"
    "          (if (< i n)"
    "            (begin"
    "              (push-child-element! i)"
    "              (let ((c (get-element)))"
    "                (pop-element!)"
    "                (iter (+ i 1) (cons c lst))))"
    "            lst))"
    "        (let ((result (reverse! (iter 0 '()))))"
    "          (pop-element!)"
    "          result)))))"
    ;
#endif // GUIHCKGUILEDEFAULTSCM_H
